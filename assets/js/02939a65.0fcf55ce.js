"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[252],{1391:e=>{e.exports=JSON.parse('{"functions":[{"name":"info","desc":"Outputs an info message prefixed with the registry name.","params":[{"name":"...","desc":"The info message components.","lua_type":"any"}],"returns":[],"function_type":"method","private":true,"source":{"line":34,"path":"lib/registry/init.luau"}},{"name":"log","desc":"Outputs a log message prefixed with the registry name if debug mode is enabled.","params":[{"name":"...","desc":"The log message components.","lua_type":"any"}],"returns":[],"function_type":"method","private":true,"source":{"line":45,"path":"lib/registry/init.luau"}},{"name":"warn","desc":"Outputs a warning message prefixed with the registry name.","params":[{"name":"...","desc":"The warning message components.","lua_type":"any"}],"returns":[],"function_type":"method","private":true,"source":{"line":59,"path":"lib/registry/init.luau"}},{"name":"getSize","desc":"Returns the number of records in the registry.","params":[],"returns":[{"desc":"The number of records in the registry.","lua_type":"number"}],"function_type":"method","source":{"line":69,"path":"lib/registry/init.luau"}},{"name":"getRecords","desc":"Returns all records in the registry.","params":[],"returns":[{"desc":"The records in the registry.","lua_type":"{ [string]: T }"}],"function_type":"method","source":{"line":79,"path":"lib/registry/init.luau"}},{"name":"getEntries","desc":"Returns all entry IDs in the registry.","params":[],"returns":[{"desc":"The list of entries\' IDs.","lua_type":"{ string }"}],"function_type":"method","source":{"line":89,"path":"lib/registry/init.luau"}},{"name":"fetch","desc":"Fetches a record by its ID.","params":[{"name":"id","desc":"The ID of the record to fetch.","lua_type":"string"}],"returns":[{"desc":"The record if found, otherwise nil.","lua_type":"T?"}],"function_type":"method","source":{"line":100,"path":"lib/registry/init.luau"}},{"name":"insert","desc":"Inserts a new record into the registry.","params":[{"name":"id","desc":"The ID of the record.","lua_type":"string"},{"name":"entry","desc":"The record to insert.","lua_type":"T"}],"returns":[{"desc":"True if the record was inserted, false if a record with the same ID already exists.","lua_type":"boolean"}],"function_type":"method","source":{"line":116,"path":"lib/registry/init.luau"}},{"name":"factorize","desc":"Sets a factory function for creating records.","params":[{"name":"factory","desc":"A function that takes raw data and returns a record of type T.","lua_type":"(data: any) -> T"}],"returns":[],"function_type":"method","source":{"line":134,"path":"lib/registry/init.luau"}},{"name":"load","desc":"Loads records from the specified folder or the registry\'s root.","params":[{"name":"folder","desc":"Optional Folder to load records from. If not provided, uses the registry\'s root.","lua_type":"Folder?"}],"returns":[{"desc":"A Promise that resolves with the number of records successfully registered.","lua_type":"Promise<number>"}],"function_type":"method","source":{"line":145,"path":"lib/registry/init.luau"}},{"name":"debug","desc":"Enables debug mode for the registry.","params":[{"name":"enable","desc":"Optional boolean to enable or disable debug mode. Defaults to true if not provided.","lua_type":"boolean?"}],"returns":[{"desc":"The registry instance for chaining.","lua_type":"Registry<T>"}],"function_type":"method","source":{"line":197,"path":"lib/registry/init.luau"}}],"properties":[],"types":[],"name":"Registry","desc":"A Registry is a collection manager that allows you to load, store, and manage records of a specific type. It supports loading records from ModuleScripts, inserting new records, fetching existing records, and more.","source":{"line":12,"path":"lib/registry/init.luau"}}')}}]);